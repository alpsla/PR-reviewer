from fastapi import FastAPI, Request, Form, HTTPException
from fastapi.templating import Jinja2Templates
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
from starlette.responses import HTMLResponse, RedirectResponse
from pathlib import Path
import logging
import os
from datetime import datetime
from services.github_service import GitHubService
from services.claude_service import ClaudeService
from utils.pr_parser import parse_pr_url
from database import db

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Initialize FastAPI
app = FastAPI(title="PR Review Assistant")

# Configure static files and templates
base_dir = Path(__file__).resolve().parent
static_dir = base_dir / "static"
templates_dir = base_dir / "templates"

# Mount static files
app.mount("/static", StaticFiles(directory=str(static_dir)), name="static")
templates = Jinja2Templates(directory=str(templates_dir))

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Initialize services
github_token = os.getenv("GITHUB_TOKEN")
claude_api_key = os.getenv("CLAUDE_API_KEY")

@app.on_event("startup")
async def startup_event():
    """Verify environment and initialize services"""
    if not all([github_token, claude_api_key]):
        logger.error("Missing required environment variables")
        raise RuntimeError("Missing required environment variables")

    # Initialize database
    try:
        await db.connect()
    except Exception as e:
        logger.error(f"Database initialization failed: {e}")
        raise

@app.on_event("shutdown")
async def shutdown_event():
    """Cleanup resources"""
    await db.disconnect()

@app.get("/", response_class=HTMLResponse)
async def index(request: Request):
    """Render index page"""
    return templates.TemplateResponse("index.html", {"request": request})

@app.post("/review", response_class=HTMLResponse)
async def review(request: Request, pr_url: str = Form(...)):
    """Handle PR review"""
    try:
        # Initialize services
        github_service = GitHubService(github_token)
        claude_service = ClaudeService(claude_api_key)

        # Parse and validate PR URL
        pr_details = parse_pr_url(pr_url)
        if not pr_details:
            raise HTTPException(status_code=400, detail="Invalid PR URL")

        # Fetch PR data
        pr_data = await github_service.fetch_pr_data(pr_details)
        files = await github_service.fetch_pr_files(pr_details)
        comments = await github_service.fetch_pr_comments(pr_details)

        # Analyze with Claude
        review_data = await claude_service.analyze_pr({
            'pr_data': pr_data,
            'files': files,
            'comments': comments
        })

        return templates.TemplateResponse(
            "review.html",
            {
                "request": request,
                "review": review_data,
                "pr_url": pr_url,
                "current_time": datetime.utcnow()
            }
        )
    except Exception as e:
        logger.error(f"Review failed: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/health")
async def health_check():
    """Health check endpoint"""
    try:
        await db.execute("SELECT 1")
        return {"status": "healthy"}
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        raise HTTPException(status_code=500, detail=str(e))